const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const puppeteer = require('puppeteer');

module.exports = {
    SlashData: new SlashCommandBuilder()
    .setName('ask-zeongpt')
    .setDescription('Ask Anything To Zeon AI (Artificial Intelligence)!')
    .addStringOption(option => option.setName('prompt').setDescription('Any Prompt For The Topic You Need To Chat with AI (Artificial Intelligence)!').setRequired(true)),
    run: async (client, interaction) => {
        if (!interaction.replied) await interaction.deferReply();

        const { options } = interaction;
        const prompt = options.getString("prompt")

        await interaction.editReply(`${client.emoji.loading} | **${prompt}** - ${interaction.user.toString()} - Getting response from the ZeonGPT...`)

        try {
            //Generate The Response From The AI By Calling The Function To Scrap The Response From The ZeonGPT Website
            const response = await generateAnswer(prompt);

            //If The Response Contains The Error Message, Then Send The Error Message To The User
            if (response.includes("There was an error getting the response from the AI! Try again later.")) {
                return await interaction.editReply(`${client.emoji.loading} | **${prompt}** - ${interaction.user.toString()} - There was an error getting the response from the AI! Try again later.`);
            }

            //If The Response Contains The Error Message, Then Send The Error Message To The User
            const embed = new EmbedBuilder()
            .setColor("Random")
            .setDescription(`\`\`\`${response.join(`\n\n\n\n`)}\`\`\``)
            .setFooter({ text: `This response is generated by an automated chatbot. It may not always be accurate. It may contain surprises as well as mistakes.`, iconURL: client.user.displayAvatarURL({ dynamic: true }) })

            //Send The Response To The User
            await interaction.editReply({ content: `${client.emoji.tick} | **${prompt}** - Generated response as per requested by ${interaction.user}`, embeds: [embed] });
        } catch (e) {
            //If There Was An Error Getting The Response From The AI, Then Send The Error Message To The User
            console.log(e)
            await interaction.editReply(`${client.emoji.loading} | **${prompt}** - ${interaction.user.toString()} - There was an error getting the response from the AI! Try again later.`);
        }
    }
}

async function generateAnswer(prompt) {

    // Create A Puppeteer Browser Instance and Create A New Page
    const browser = await puppeteer.launch({
        headless: "new"
    });
    const chatpage = await browser.newPage();

    //Go To The ZeonGPT Website
    await chatpage.goto('https://zeon.zapier.app/');

    //Wait For The Chatbot To Load. After That, Type The Prompt And Press Enter
    const typingArea = 'textarea[aria-label="chatbot-user-prompt"]';
    await chatpage.waitForSelector(typingArea);
    await chatpage.type(typingArea, prompt);
    await chatpage.keyboard.press('Enter');

    //Wait For The Response To Load And For Chatbot To Generate The Response Successfully Wait For 10 Seconds
    await chatpage.waitForSelector('[data-testid="final-bot-response"] p')
    await sleep(10000);

    //Get The Response From The Chatbot By Scraping The Text Content Of The Element
    var value = await chatpage.$$eval('[data-testid="final-bot-response"]', async (elements) => {
        return elements.map((element) => element.textContent)
    });

    //If The Response Is Empty, Then There Was An Error Getting The Response From The AI. So, Push An Error Message To The Array
    setTimeout(async () => {
        if (value.length === 0 || value[0] === "" || value[0] === undefined || value[0] === null) {
            value.push("There was an error getting the response from the AI! Try again later.")
        }
    }, 30000);

    //Close The Browser
    await browser.close();

    //Sort The Response Array. So That The Response Is In The Correct Order
    value.shift();

    //Return The Response Array
    return value;
}

//Function To Wait For A Certain Amount Of Time

async function sleep(ms) {
    let start = new Date().getTime();
    let end = start;
    while (end < start + ms) {
        end = new Date().getTime();
    }
};